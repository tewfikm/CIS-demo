NGINX APP PROTEC demo

1 - DEPLOY ARCADIA
SSH ON CICD server : 
kubectl apply -f /home/ubuntu/Arcadia_k8S/all_apps.yaml

CHECK SERVICES ON CHROME ON JUMPHOST
SHOW THAT ARCADIA is Deployed but not yet published

##PHASE2
Publish Arcadia with KIC
deply KIC 

kubectl apply -f /home/ubuntu/k8s_ingress/full_ingress_arcadia.yaml

##PHASE3
DEPLOY CIS using NODEPORT on BIGIP1 10.1.1.10

git clone -b master https://github.com/tewfikm/CIS-demo.git ~/CIS-demo


cd CIS-demo

cd Node\ Port\ Mode/

kubectl get nodes

kubectl create secret generic bigip-login -n kube-system --from-literal=username=admin --from-literal=password=Letmein41!

kubectl create serviceaccount k8s-bigip-ctlr -n kube-system

kubectl create clusterrolebinding k8s-bigip-ctlr-clusteradmin-1 --clusterrole=cluster-admin --serviceaccount=kube-system:k8s-bigip-ctlr-1

kubectl create -f nodeport-deployment.yaml

kubectl get deployment k8s-bigip-ctlr-1 --namespace kube-system

kubectl get pods -o wide -n kube-system   

kubectl describe svc f5-hello-world

NOW CIS is installed in NODEPORT

Let's deploy an APP
kubectl create -f deployment-hello-world.yaml
kubectl create -f nodeport-service-hello-world.yaml
kubectl create -f ingress-hello-world.yaml

kubectl logs k8s-bigip-ctlr-1-5577d848b9-jtwts --namespace kube-system

##PHASE 4 : DEPLOY CIS in cluster Mode



Show BIGIP 2 vxlan
kubectl get po --namespace kube-system -l app=flannel
kubectl logs --namespace kube-system kube-flannel-ds-amd64-6hv77 -c kube-flannel



deploy another CIS for BIGip 2

kubectl create -f bigip-node.yaml
kubectl get nodes
kubectl get pods -o wide -n kube-system



kubectl create serviceaccount k8s-bigip-ctlr-2 -n kube-system
kubectl create clusterrolebinding k8s-bigip-ctlr-clusteradmin-2 --clusterrole=cluster-admin --serviceaccount=kube-system:k8s-bigip-ctlr-2

kubectl create -f clusterip-deployment.yaml

kubectl get deployment k8s-bigip-ctlr-2 --namespace kube-system
kubectl get pods -o wide -n kube-system

### PHASE 5 : DEPLOY APP
kubectl create -f deployment-hello-world-2.yaml
kubectl create -f clusterip-service-hello-world-2.yaml
kubectl create -f ingress-hello-world-2.yaml

show scaleup
kubectl scale --replicas=10 deployment/f5-hello-world-web-2 -n default
kubectl scale --replicas=10 deployment/f5-hello-world-web -n default
kubectl get pods




### PHASE 6: NAP DEPLOY


FINISH


CLEANUP on BIGIP 1

DELETE INGRESS
kubectl delete -f deployment-hello-world.yaml
kubectl delete -f nodeport-service-hello-world.yaml
kubectl delete -f ingress-hello-world.yaml

DELETE CONFIG MAP :
kubectl delete -f configmap-hello-world.yaml
kubectl delete -f nodeport-service-hello-world.yaml
kubectl delete -f deployment-hello-world.yaml
kubectl create -f delete-hello-world.yaml
kubectl delete -f delete-hello-world.yaml

CLEANUP on BIGIP 2
DELETE INGRESS
kubectl delete -f ingress-hello-world-2.yaml
kubectl delete -f clusterip-service-hello-world.yaml
kubectl delete -f deployment-hello-world-2.yaml

DELETE CONFIG MAP
kubectl delete -f configmap-hello-world-2.yaml
kubectl delete -f clusterip-service-hello-world.yaml
kubectl delete -f deployment-hello-world-2.yaml
kubectl create -f delete-hello-world.yaml
kubectl delete -f delete-hello-world.yaml

